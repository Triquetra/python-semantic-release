{%   from 'macros.rst.j2' import apply_alphabetical_ordering_by_brk_descriptions
%}{% from 'macros.rst.j2' import apply_alphabetical_ordering_by_descriptions
%}{% from 'macros.rst.j2' import emoji_map, extract_pr_link_reference
%}{% from 'macros.rst.j2' import format_breaking_changes_description, format_commit_summary_line
%}{% from 'macros.rst.j2' import format_link_reference, generate_heading_underline
%}{% from 'macros.rst.j2' import section_heading_order
%}{#

âœ¨ Features
-----------

* Add new feature (`#10`_, `8a7b8ec`_)

* **scope**: Add another feature (`abcdef0`_)

ðŸª² Bug Fixes
------------

* Fix bug (`#11`_, `8a7b8ec`_)

ðŸ’¥ BREAKING CHANGES
-------------------

* With the change _____, the change causes ___ effect. Ultimately, this section
  it is a more detailed description of the breaking change. With an optional
  scope prefix like the commit messages above.

* **scope**: this breaking change has a scope to identify the part of the code that
  this breaking change applies to for better context.

.. _#10: https://domain.com/namespace/repo/pull/10
.. _#11: https://domain.com/namespace/repo/pull/11
.. _8a7B8ec: https://domain.com/owner/repo/commit/8a7b8ec
.. _abcdef0: https://domain.com/owner/repo/commit/abcdef0

#}{%  set max_line_width = max_line_width | default(100)
%}{%  set hanging_indent = hanging_indent | default(2)
%}{#
#}{%  set post_paragraph_links = []
%}{#
#}{%  for type_ in section_heading_order if type_ in commit_objects
%}{#    # PREPARE SECTION HEADER
#}{%    set section_header = "%s %s" | format(emoji_map[type_], type_ | title)
%}{#
   #    # PREPROCESS COMMITS
#}{%    set ns = namespace(commits=commit_objects[type_])
%}{{    apply_alphabetical_ordering_by_descriptions(ns) | default("", true)
}}{#
#}{%    set commit_descriptions = []
%}{#
#}{%    for commit in ns.commits
%}{#      # Extract PR/MR reference if it exists and store it for later
#}{%      set pr_link_reference = extract_pr_link_reference(commit) | default("", true)
%}{%      if pr_link_reference != ""
%}{{        post_paragraph_links.append(pr_link_reference) | default("", true)
}}{%      endif
%}{#
   #      # Always generate a commit hash reference link and store it for later
#}{%      set commit_hash_link_reference = format_link_reference(
            commit.hexsha | commit_hash_url,
            commit.short_hash
          )
%}{{      post_paragraph_links.append(commit_hash_link_reference) | default("", true)
}}{#
          # Generate the commit summary line and format it for RST
          # Update the first line with reference links and if commit description
          # has more than one line, add the rest of the lines
          # NOTE: This is specifically to make sure to not hide contents
          # of squash commits (until parse support is added)
#}{%      set description = "* %s" | format(format_commit_summary_line(commit))
%}{%      if commit.descriptions | length > 1
%}{%        set description = "%s\n\n%s" | format(
              description, commit.descriptions[1:] | join("\n\n") | trim
            )
%}{%      endif
%}{%      set description = description | convert_md_to_rst
%}{%      set description = description | autofit_text_width(max_line_width, hanging_indent)
%}{{      commit_descriptions.append(description) | default("", true)
}}{%    endfor
%}{#
   #    # PRINT SECTION (Header & Commits)
   #    # Note: Must add an additional character to the section header when determining
   #    # the underline because of the emoji character which can serve as 2 characters in length.
#}{{    "\n"
}}{{    section_header ~ "\n"
}}{{    generate_heading_underline(section_header ~ " ", '-') ~ "\n"
}}{{
        "\n%s\n" | format(commit_descriptions | unique | join("\n\n"))

}}{%  endfor
%}{#
   #
   #  # Determine if any commits have a breaking change
   #  # commit_objects is a dictionary of strings to a list of commits { "Features", [ParsedCommit(), ...] }
#}{%  set breaking_commits = []
%}{%  for commits in commit_objects.values()
%}{#    # Filter out breaking change commits that have no breaking descriptions
#}{{    breaking_commits.extend(
          commits | rejectattr("error", "defined") | selectattr("breaking_descriptions.0")
        ) | default("", true)
}}{%  endfor
%}{#
#}{%  if breaking_commits | length > 0
%}{#    # PREPROCESS COMMITS
#}{%    set brk_ns = namespace(commits=breaking_commits)
%}{{    apply_alphabetical_ordering_by_brk_descriptions(brk_ns) | default("", true)
}}{#
#}{%    set brking_descriptions = []
%}{#
#}{%    for commit in brk_ns.commits
%}{%      set full_description = "* %s" | format(
            format_breaking_changes_description(commit).split("\n\n") | join("\n\n* ")
          )
%}{{      brking_descriptions.append(
            full_description | convert_md_to_rst | autofit_text_width(max_line_width, hanging_indent)
          ) | default("", true)
}}{%    endfor
%}{#
   #    # PRINT BREAKING CHANGE DESCRIPTIONS (header & descriptions)
#}{{    "\n"
}}{{    "%s BREAKING CHANGES\n" | format(emoji_map["breaking"])
}}{{    '-------------------\n'
}}{{
        "\n%s\n" | format(brking_descriptions | unique | join("\n\n"))
}}{#
#}{%  endif
%}{#
   #
   #  # PRINT POST PARAGRAPH LINKS
#}{%  if post_paragraph_links | length > 0
%}{#    # Print out any PR/MR or Issue URL references that were found in the commit messages
#}{{    "\n%s\n" | format(post_paragraph_links | unique | sort | join("\n"))
}}{%  endif
%}
